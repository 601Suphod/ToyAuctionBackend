const express = require("express");
const {
  getProfile,
  updateProfile,           // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
  getLoginHistory,
  uploadProfileImage,
  addAddress,              // ‚úÖ ‡πÉ‡∏´‡∏°‡πà
  deleteAddress,           // ‚úÖ ‡πÉ‡∏´‡∏°‡πà
  setDefaultAddress        // ‚úÖ ‡πÉ‡∏´‡∏°‡πà
} = require("../../controllers/profileController");

const { checkLogin } = require("../../middlewares/authMiddleware");
const multer = require("multer");
const Profile = require("../../schemas/v1/profile.schema");

const router = express.Router();
const upload = multer({ storage: multer.memoryStorage() });

router.use(checkLogin);

// üîπ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
router.get("/", getProfile);

router.get("/history", getLoginHistory);
router.post("/addresses", addAddress);
router.delete("/addresses/:addressId", deleteAddress);
router.patch("/addresses/default/:addressId", setDefaultAddress);


// üîπ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
router.post("/upload", upload.single("image"), async (req, res) => {
  try {
    if (!req.user?.userId) return res.status(401).json({ error: "Unauthorized" });
    if (!req.file) return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û" });

    const profile = await Profile.findOne({ user: req.user.userId });
    if (!profile) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

    profile.profileImage = {
      data: Buffer.from(req.file.buffer),
      contentType: req.file.mimetype,
    };
    await profile.save();

    res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  } catch (error) {
    console.error("üö® Upload Error:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
  }
});

// üîπ ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
router.get("/image", async (req, res) => {
  try {
    if (!req.user?.userId) return res.status(401).json({ error: "Unauthorized" });

    const profile = await Profile.findOne({ user: req.user.userId });
    if (!profile?.profileImage?.data) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    res.json({
      success: true,
      image: `data:${profile.profileImage.contentType};base64,${profile.profileImage.data.toString("base64")}`,
    });
  } catch (error) {
    console.error("üö® Get Image Error:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
  }
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/addresses", async (req, res) => {
  try {
    const profile = await Profile.findOne({ user: req.user.userId });
    if (!profile) return res.status(404).json({ success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });

    res.json({ success: true, addresses: profile.addresses || [] });
  } catch (err) {
    console.error("‚ùå GET /addresses error:", err);
    res.status(500).json({ success: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
router.post("/addresses", async (req, res) => {
  try {
    const { label, fullAddress } = req.body;
    if (!label || !fullAddress) {
      return res.status(400).json({ success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ label ‡πÅ‡∏•‡∏∞ fullAddress" });
    }

    const profile = await Profile.findOne({ user: req.user.userId });
    if (!profile) return res.status(404).json({ success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });

    profile.addresses.push({ label, fullAddress });
    await profile.save();

    res.json({ success: true, addresses: profile.addresses });
  } catch (err) {
    console.error("‚ùå POST /addresses error:", err);
    res.status(500).json({ success: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });
  }
});

module.exports = router;
