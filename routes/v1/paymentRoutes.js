const express = require("express");
const multer = require("multer");
const path = require("path");
const fs = require("fs");  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import fs
const paymentController = require("../../controllers/paymentController");

const router = express.Router();

// üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'uploads/slips' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const uploadPath = "uploads/slips/";
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    }
    cb(null, uploadPath);  // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname));  // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
  },
});
const upload = multer({ storage });

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
// router.post("/generate-qr", paymentController.generatePromptPayQR);

router.post("/generate-qr", paymentController.generateSellerQR);

// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
router.get("/payment-status/:id", paymentController.checkPaymentStatus);

// üîπ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
router.post("/upload-slip/:id", upload.single("slip"), paymentController.uploadSlip);

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
router.get("/check-status/:id", paymentController.checkPaymentStatus);

router.get("/slip-by-auction/:auctionId", paymentController.getSlipByAuctionId);

router.post("/upload-slip/by-auction/:auctionId", upload.single("slip"), paymentController.uploadSlipByAuctionId);

router.post("/confirm-payment/by-auction/:auctionId", paymentController.confirmPaymentByAuctionId);


module.exports = router;
