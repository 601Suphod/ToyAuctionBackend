const qrcode = require("qrcode");
const generatePayload = require("promptpay-qr");
const Profile = require("../schemas/v1/profile.schema");
const fs = require("fs");
const path = require("path");
const Payment = require("../schemas/v1/payment.shema");
const Auction = require("../schemas/v1/auction.schema");

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ payment ‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å profile
exports.generatePaymentQR = async (req, res) => {
  try {
    const { auctionId } = req.body;
    if (!auctionId) {
      return res.status(400).json({ error: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ auctionId" });
    }

    const auction = await Auction.findById(auctionId);
    if (!auction) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•" });
    }

    const sellerPhone = auction.seller?.phone;
    if (!sellerPhone) {
      return res.status(400).json({ error: "‚ùå ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå" });
    }

    let payment = await Payment.findOne({
      auctionId,
      isPaid: false,
      status: { $ne: "rejected" }
    });

    if (payment) {
      return res.status(200).json({
        success: true,
        qrCode: payment.qrCode,
        paymentId: payment._id,
        message: "üìå ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
      });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏° populate user ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå
    const profile = await Profile.findOne({ user: auction.highestBidder }).populate("user");
    const defaultAddr = profile?.addresses?.find(addr => addr.isDefault) || profile?.addresses?.[0];

    const payload = generatePayload(sellerPhone, { amount: auction.currentPrice });
    const qrCode = await qrcode.toDataURL(payload);

    payment = new Payment({
      userId: auction.highestBidder,
      auctionId,
      amount: auction.currentPrice,
      qrCode,
      shippingAddress: defaultAddr?.fullAddress || "",
      recipientName: profile?.name || "",
      recipientPhone: profile?.user?.phone || profile?.phone || "", // ‚úÖ ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ!
      expiresAt: new Date(Date.now() + 15 * 60 * 1000),
    });

    await payment.save();

    auction.paymentQR = qrCode;
    await auction.save();

    res.status(200).json({ success: true, qrCode, paymentId: payment._id });
  } catch (err) {
    console.error("‚ùå generatePaymentQR error:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

exports.getSlipByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;

    const payment = await Payment.findOne({
      auctionId,
      slipImage: { $ne: null }
    }).sort({ createdAt: -1 });

    if (!payment) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });

    res.status(200).json({
      success: true,
      paymentId: payment._id,
      slipImage: payment.slipImage,
      isPaid: payment.isPaid,
      status: payment.status,
      shippingStatus: payment.shippingStatus,
      trackingNumber: payment.trackingNumber,
      note: payment.note || "",

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å payment schema ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏ã‡∏ü‡∏•‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
      recipientName: payment.recipientName || "",
      recipientPhone: payment.recipientPhone || "",
      shippingAddress: payment.shippingAddress || ""
    });
  } catch (err) {
    console.error("‚ùå getSlipByAuctionId error:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
exports.checkPaymentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const payment = await Payment.findById(id);
    if (!payment) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });

    res.status(200).json({
      success: true,
      slipImage: payment.slipImage,
      isPaid: payment.isPaid,
      status: payment.status,
      shippingStatus: payment.shippingStatus,
      trackingNumber: payment.trackingNumber,
    });
  } catch (err) {
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
exports.uploadPaymentSlip = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const payment = await Payment.findById(paymentId);
    if (!payment) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
    if (!req.file) return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ" });

    payment.slipImage = "/" + req.file.path.replace(/\\/g, "/");
    payment.status = "uploaded";
    await payment.save();

    res.status(200).json({ success: true, slipImage: payment.slipImage });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
exports.confirmPaymentByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;
    const payment = await Payment.findOne({ auctionId });
    if (!payment) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });

    payment.isPaid = true;
    payment.status = "approved";
    await payment.save();

    res.status(200).json({ success: true, message: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });
  }
}

// ‚úÖ ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
exports.updateShippingAddress = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const { address, note } = req.body;

    if (!address) return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });

    const payment = await Payment.findById(paymentId);
    if (!payment) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });

    if (!payment.slipImage) {
      return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡πà‡∏≠‡∏ô" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å req.user ‡∏°‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô payment
    const recipientName = req.user.name || "";
    const recipientPhone = req.user.phone || "";

    payment.shippingAddress = address;
    payment.recipientName = recipientName;
    payment.recipientPhone = recipientPhone;
    payment.note = note || "";

    await payment.save();

    res.status(200).json({ success: true, message: "üì¶ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå updateShippingAddress Error:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ pending
exports.getPendingPayments = async (req, res) => {
  try {
    const payments = await Payment.find({ status: "pending" })
      .populate("user", "name email")
      .populate("auction", "name currentPrice");

    res.status(200).json({ success: true, payments });
  } catch (error) {
    console.error("‚ùå getPendingPayments Error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
exports.approvePayment = async (req, res) => {
  try {
    const { id } = req.params;
    const payment = await Payment.findById(id);
    if (!payment) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

    payment.status = "approved";
    payment.isPaid = true;
    payment.paymentConfirmedAt = new Date(); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
    await payment.save();

    res.status(200).json({ success: true, message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå approvePayment Error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
exports.rejectPayment = async (req, res) => {
  try {
    const { id } = req.params;
    const payment = await Payment.findById(id);
    if (!payment) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

    payment.status = "rejected";
    await payment.save();

    res.status(200).json({ success: true, message: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå rejectPayment Error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà start ‡πÅ‡∏•‡∏∞ end
exports.getPaidPaymentsByDateRange = async (req, res) => {
  try {
    const { start, end } = req.query;

    if (!start || !end) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ start ‡πÅ‡∏•‡∏∞ end (ISO format)" });
    }

    const startDate = new Date(start);
    const endDate = new Date(end);

    const payments = await Payment.find({
      isPaid: true,
      paymentConfirmedAt: { $gte: startDate, $lte: endDate }
    })
      .populate("userId", "name email")
      .populate("auctionId", "name currentPrice");

    res.status(200).json({ success: true, count: payments.length, payments });
  } catch (error) {
    console.error("‚ùå getPaidPaymentsByDateRange Error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });
  }
};

// ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
exports.getMyPayments = async (req, res) => {
  try {
    const userId = req.user._id;
    const payments = await Payment.find({ userId })
      .sort({ createdAt: -1 })
      .populate("auctionId", "name image");

    res.status(200).json({ success: true, payments });
  } catch (err) {
    console.error("‚ùå getMyPayments Error:", err);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.getPendingPayments = async (req, res) => {
  try {
    const payments = await Payment.find({ status: { $in: ["pending", "uploaded"] } })
      .populate("userId", "name email phone")
      .populate("auctionId", "name image currentPrice");

    res.status(200).json({ status: "success", payments });
  } catch (err) {
    console.error("‚ùå Error fetching payments:", err);
    res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.getPaymentById = async (req, res) => {
  try {
    const { id } = req.params;
    const payment = await Payment.findById(id)
      .populate("userId", "name email phone")
      .populate("auctionId", "name image currentPrice seller");

    if (!payment) return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

    res.status(200).json({ status: "success", payment });
  } catch (err) {
    console.error("‚ùå getPaymentById Error:", err);
    res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.getSellerReceivedPayments = async (req, res) => {
  try {
    const sellerId = req.user._id;
    const payments = await Payment.find({ isPaid: true })
      .populate({
        path: "auctionId",
        match: { seller: sellerId },
        select: "name image",
      })
      .populate("userId", "name email");

    const filtered = payments.filter(p => p.auctionId != null);

    res.status(200).json({ status: "success", payments: filtered });
  } catch (err) {
    console.error("‚ùå Error getSellerReceivedPayments:", err);
    res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user
exports.getMyPurchases = async (req, res) => {
  try {
    const payments = await Payment.find({ userId: req.user._id })
      .sort({ createdAt: -1 })
      .populate("auctionId", "name image currentPrice");

    res.status(200).json({ success: true, payments });
  } catch (err) {
    console.error("‚ùå getMyPurchases Error:", err);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.updateShippingStatus = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const { shippingStatus, trackingNumber } = req.body;

    if (!shippingStatus) {
      return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" });
    }

    const payment = await Payment.findById(paymentId);
    if (!payment) return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

    payment.shippingStatus = shippingStatus;
    payment.trackingNumber = trackingNumber || "";

    await payment.save();

    res.status(200).json({ success: true, message: "üì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå updateShippingStatus Error:", err);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};