const qrcode = require("qrcode");
const generatePayload = require("promptpay-qr");
const QRCodeModel = require("../schemas/v1/QRcode.shema");
const Auction = require("../schemas/v1/auction.schema");
const { v4: uuidv4 } = require("uuid");
const fetch = require("node-fetch"); // ‚úÖ ‡πÉ‡∏ä‡πâ fetch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Backend
const Tesseract = require('tesseract.js');

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
exports.generatePaymentQR = async (req, res) => {
  try {
    const { auctionId } = req.body;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
    const auction = await Auction.findById(auctionId).populate("owner", "phone email");
    if (!auction) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•" });
    }

    // ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢
    const sellerPhone = auction.owner.phone;
    if (!sellerPhone) {
      return res.status(400).json({ error: "‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå" });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
    const payload = generatePayload(sellerPhone, { amount: auction.currentPrice });
    const qrCode = await qrcode.toDataURL(payload);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å QR Code ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const payment = new Payment({
      userId: auction.highestBidder,
      auctionId,
      amount: auction.currentPrice,
      qrCode,
      status: "pending",
    });
    await payment.save();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö QR Code
    auction.paymentQR = qrCode;
    await auction.save();

    res.status(200).json({ success: true, qrCode, auctionId });
  } catch (error) {
    console.error("‚ùå Error generating QR Code:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
exports.checkPaymentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üîç Checking status for QR Code ID: ${id}`);
    
    const qrCodeData = await QRCodeModel.findById(id);

    if (!qrCodeData) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (new Date() > qrCodeData.expiresAt) {
      qrCodeData.isPaid = false;
      await qrCodeData.save();
      return res.status(400).json({ error: "‚è≥ QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß" });
    }

    console.log(`‚úÖ Payment status: ${qrCodeData.isPaid ? "PAID" : "NOT PAID"}`);

    res.status(200).json({
      success: true,
      isPaid: qrCodeData.isPaid,
      slipImage: qrCodeData.slipImage,
      message: qrCodeData.isPaid ? "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" : "‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
    });
  } catch (error) {
    console.error("‚ùå Error checking payment status:", error.message);
    res.status(500).json({ error: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

exports.uploadSlip = async (req, res) => {
  try {
    const qrCodeId = req.params.id;
    const qrCodeData = await QRCodeModel.findById(qrCodeId);

    if (!qrCodeData) {
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code" });
    }

    if (!req.file) {
      return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ" });
    }

    // ‚ùå ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ OCR
    // const slipPath = req.file.path;
    // const parsedAmount = await parseSlipAmount(slipPath);
    // const expectedAmount = qrCodeData.amount;

    // if (Math.abs(parsedAmount - expectedAmount) > 1) {
    //   return res.status(400).json({ success: false, message: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    // }

    qrCodeData.slipImage = `http://localhost:3111/${req.file.path}`;
    qrCodeData.isPaid = false; // ‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢
    await qrCodeData.save();

    return res.status(200).json({
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
      slipImage: qrCodeData.slipImage,
    });
  } catch (error) {
    console.error("‚ùå Upload slip error:", error);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ" });
  }
};

const checkPaymentsAutomatically = async () => {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...");
  try {
    const pendingPayments = await QRCodeModel.find({ isPaid: false, expiresAt: { $gte: new Date() } });

    for (const payment of pendingPayments) {
      // üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô API ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô checkBankPaymentStatus ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ)
      const isPaid = await checkBankPaymentStatus(payment.payload); 

      if (isPaid) {
        payment.isPaid = true;
        await payment.save();

        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${payment._id}`);

        // üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        notifySeller(payment);
      }
    }
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:", error);
  }
};

exports.generateSellerQR = async (req, res) => {
  try {
    const { auctionId, recipient, amount } = req.body;

    if (!recipient || !amount || !auctionId) {
      return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
    const payload = generatePayload(recipient, { amount: parseFloat(amount) });
    const qrCodeDataUrl = await qrcode.toDataURL(payload);
    const paymentId = uuidv4(); // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `paymentId` ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å QR Code ‡∏•‡∏á `QRCodeSchema`
    const qrCodeEntry = await QRCodeModel.create({
      auctionId,
      recipient,
      amount,
      payload,
      qrCode: qrCodeDataUrl,
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // ‚úÖ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      isPaid: false,
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `Auction` ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `qrCode` ‡πÅ‡∏•‡∏∞ `paymentId`
    const updatedAuction = await Auction.findByIdAndUpdate(
      auctionId,
      { qrCode: qrCodeDataUrl, paymentId },
      { new: true }
    );

    if (!updatedAuction) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•" });
    }

    res.status(200).json({
      success: true,
      message: "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      qrCode: qrCodeDataUrl,
      paymentId,
      auctionId
    });
  } catch (error) {
    console.error("‚ùå Error generating QR Code:", error);
    res.status(500).json({ error: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

exports.checkPaymentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const qrCodeData = await QRCodeModel.findById(id);

    if (!qrCodeData) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡∏ô‡∏µ‡πâ" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (new Date() > qrCodeData.expiresAt) {
      qrCodeData.isPaid = false;
      await qrCodeData.save();
      return res.status(400).json({ error: "‚è≥ QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß" });
    }

    res.status(200).json({
      success: true,
      isPaid: qrCodeData.isPaid,
      slipImage: qrCodeData.slipImage,
      message: qrCodeData.isPaid ? "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" : "‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
    });
  } catch (error) {
    console.error("Error checking payment status:", error.message);
    res.status(500).json({ error: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

// üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QR Code ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
exports.updateQRForAuction = async (req, res) => {
  try {
    const { qrCode } = req.body;
    const auctionId = req.params.id;

    if (!qrCode) {
      return res.status(400).json({ status: "error", message: "QR Code ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÑ‡∏î‡πâ" });
    }

    const auction = await Auction.findByIdAndUpdate(
      auctionId,
      { qrCode },
      { new: true }
    );

    if (!auction) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•" });
    }

    res.status(200).json({ status: "success", message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", data: auction });
  } catch (error) {
    console.error("‚ùå Error updating QR Code:", error);
    res.status(500).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QR Code ‡πÑ‡∏î‡πâ" });
  }
};

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
exports.uploadPaymentSlip = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const slipImage = req.file ? req.file.path : null;

    if (!slipImage) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    const payment = await Payment.findById(paymentId).populate("auctionId");
    if (!payment) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "completed"
    payment.status = "completed";
    payment.slipImage = slipImage;
    await payment.save();

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢
    await Notification.create({
      user: payment.auctionId.owner,
      message: `‚úÖ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• "${payment.auctionId.name}" ‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
      type: "payment_received",
    });

    res.status(200).json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error uploading slip:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
exports.updateShippingAddress = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const { address } = req.body;

    if (!address) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    const payment = await Payment.findById(paymentId);
    if (!payment || payment.status !== "completed") {
      return res.status(400).json({ error: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ" });
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    payment.shippingAddress = address;
    await payment.save();

    res.status(200).json({ success: true, message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error updating shipping address:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ
const parseSlipAmount = async (imagePath) => {
  try {
    const result = await Tesseract.recognize(
      imagePath,
      'eng', // ‡∏†‡∏≤‡∏©‡∏≤
      {
        logger: (m) => console.log(m), // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      }
    );

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    const amount = extractAmountFromText(result.text); // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å OCR
    return amount;
  } catch (error) {
    console.error("Error parsing slip amount:", error);
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ");
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà OCR ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
const extractAmountFromText = (text) => {
  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà OCR ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, ‡∏ø, ‡πÅ‡∏•‡∏∞ , (comma)
  const cleanedText = text.replace(/[,‡∏ø\s]/g, '');  // ‡∏•‡∏ö , ‡∏ø ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
  const regex = /\d+(?:\.\d{2})?/g;
  const match = cleanedText.match(regex);
  return match ? parseFloat(match[0]) : null;
};

exports.getSlipByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;

    const qrCodeData = await QRCodeModel.findOne({ auctionId });

    if (!qrCodeData) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ" });
    }

    res.status(200).json({
      success: true,
      slipImage: qrCodeData.slipImage,
      isPaid: qrCodeData.isPaid,
      message: qrCodeData.isPaid ? "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" : "‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
    });
  } catch (error) {
    console.error("‚ùå Error fetching slip by auctionId:", error.message);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

exports.uploadSlipByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;
    const slipImagePath = req.file ? `/uploads/slips/${req.file.filename}` : null;

    if (!slipImagePath) {
      return res.status(400).json({ success: false, message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" });
    }

    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // ‡πÉ‡∏ä‡πâ auctionId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    return res.status(200).json({ success: true, slipImage: slipImagePath });
  } catch (error) {
    console.error("‚ùå Error while uploading slip:", error);
    return res.status(500).json({ success: false, message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ" });
  }
};

exports.confirmPaymentByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;
    const qrCodeData = await QRCodeModel.findOne({ auctionId });

    if (!qrCodeData) {
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
    }

    qrCodeData.isPaid = true;
    await qrCodeData.save();

    res.status(200).json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (error) {
    console.error("‚ùå confirmPaymentByAuctionId:", error.message);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
  }
};


// üìå ‡∏£‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(checkPaymentsAutomatically, 5 * 60 * 1000);