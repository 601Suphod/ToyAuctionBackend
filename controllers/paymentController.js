const qrcode = require("qrcode");
const generatePayload = require("promptpay-qr");
const Profile = require("../schemas/v1/profile.schema");
const fs = require("fs");
const path = require("path");
const Payment = require("../schemas/v1/payment.shema");
const Auction = require("../schemas/v1/auction.schema");
const User = require("../schemas/v1/user.schema");
const PDFDocument = require("pdfkit");
const mongoose = require("mongoose"); 

exports.generatePaymentQR = async (req, res) => {
  try {
    const { auctionId } = req.body;
    if (!auctionId) {
      return res.status(400).json({ error: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ auctionId" });
    }

    const auction = await Auction.findById(auctionId);
    if (!auction) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•" });
    }

    const sellerPhone = auction.seller?.phone;
    if (!sellerPhone) {
      return res.status(400).json({ error: "‚ùå ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢ (‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° unique index)
    let payment = await Payment.findOne({
      auctionId,
      userId: auction.highestBidder,
      isPaid: false
    });

    if (payment) {
      return res.status(200).json({
        success: true,
        qrCode: payment.qrCode,
        paymentId: payment._id,
        message: "üìå ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
      });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    const profile = await Profile.findOne({ user: auction.highestBidder }).populate("user");
    const defaultAddr = profile?.addresses?.find(addr => addr.isDefault) || profile.addresses?.[0];

    if (!defaultAddr) {
      return res.status(400).json({ error: "‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });
    }

    const payload = generatePayload(sellerPhone, { amount: auction.currentPrice });
    const qrCode = await qrcode.toDataURL(payload);

    payment = new Payment({
      userId: auction.highestBidder,
      auctionId,
      amount: auction.currentPrice,
      qrCode,
      shippingAddress: defaultAddr.fullAddress || "",
      recipientName: defaultAddr.name || profile.name || "",
      recipientPhone: defaultAddr.phone || profile.user?.phone || "",
      expiresAt: new Date(Date.now() + 15 * 60 * 1000),
    });

    await payment.save();

    auction.paymentQR = qrCode;
    await auction.save();

    res.status(200).json({ success: true, qrCode, paymentId: payment._id });
  } catch (err) {
    console.error("‚ùå generatePaymentQR error:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

exports.getSlipByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤ slip ‡∏à‡∏∞‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const payment = await Payment.findOne({ auctionId })
      .sort({ createdAt: -1 });

    if (!payment) {
      console.log("üìç ‡πÑ‡∏°‡πà‡∏û‡∏ö payment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auctionId:", auctionId);
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
    }

    res.status(200).json({
      success: true,
      paymentId: payment._id,
      slipImage: payment.slipImage || null,
      isPaid: payment.isPaid,
      status: payment.status,
      shippingStatus: payment.shippingStatus,
      trackingNumber: payment.trackingNumber,
      note: payment.note || "",

      recipientName: payment.recipientName || "",
      recipientPhone: payment.recipientPhone || "",
      shippingAddress: payment.shippingAddress || ""
    });
  } catch (err) {
    console.error("‚ùå getSlipByAuctionId error:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.checkPaymentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const payment = await Payment.findById(id);
    if (!payment) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });

    res.status(200).json({
      success: true,
      slipImage: payment.slipImage,
      isPaid: payment.isPaid,
      status: payment.status,
      shippingStatus: payment.shippingStatus,
      trackingNumber: payment.trackingNumber,
    });
  } catch (err) {
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.uploadPaymentSlip = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const payment = await Payment.findById(paymentId);
    if (!payment) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
    if (!req.file) return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ" });

    payment.slipImage = "/" + req.file.path.replace(/\\/g, "/");
    payment.status = "uploaded";
    await payment.save();

    res.status(200).json({ success: true, slipImage: payment.slipImage });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.confirmPaymentByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;
    const payment = await Payment.findOne({ auctionId });
    if (!payment) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });

    payment.isPaid = true;
    payment.status = "approved";

    payment.paymentConfirmedAt = new Date();

    await payment.save();

    res.status(200).json({ success: true, message: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });
  }
}

exports.updateShippingAddress = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const { address, note } = req.body;

    if (!address) return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });

    const payment = await Payment.findById(paymentId);
    if (!payment) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });

    if (!payment.slipImage) {
      return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡πà‡∏≠‡∏ô" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å profile ‡πÅ‡∏ó‡∏ô req.user
    const profile = await Profile.findOne({ user: payment.userId });
    if (!profile) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

    const defaultAddr = profile.addresses?.find((addr) => addr.isDefault) || profile.addresses?.[0];

    const recipientName = defaultAddr?.name || profile.name || "";
    const recipientPhone = defaultAddr?.phone || profile.phone || "";

    payment.shippingAddress = address;
    payment.recipientName = recipientName;
    payment.recipientPhone = recipientPhone;
    payment.note = note || "";

    await payment.save();

    res.status(200).json({ success: true, message: "üì¶ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå updateShippingAddress Error:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.updateShippingStatus = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const { shippingStatus, trackingNumber } = req.body;

    if (!shippingStatus) {
      return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" });
    }

    const payment = await Payment.findById(paymentId);
    if (!payment) return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

    payment.shippingStatus = shippingStatus;
    payment.trackingNumber = trackingNumber || "";

    await payment.save();

    res.status(200).json({ success: true, message: "üì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå updateShippingStatus Error:", err);
    res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.getShippingHistory = async (req, res) => {
  try {
    const { auctionId } = req.params;
    console.log("üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö auctionId:", auctionId);

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ query ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô MongoDB
    const objectId = mongoose.Types.ObjectId.isValid(auctionId)
      ? new mongoose.Types.ObjectId(auctionId)
      : null;

    if (!objectId) {
      return res.status(400).json({ success: false, message: "auctionId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const payment = await Payment.findOne({ auctionId: objectId });
    if (!payment) {
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
    }

    // mock data ‚Äî ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô DB ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    const history = [
      {
        time: "2025-04-06T15:48:00",
        message: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        status: "delivered",
        location: "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ"
      },
      {
        time: "2025-04-06T11:12:00",
        message: "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏™‡πà‡∏á",
        status: "shipped",
        location: "‡∏ö‡∏≤‡∏á‡∏õ‡∏•‡∏≤‡∏°‡πâ‡∏≤"
      },
      {
        time: "2025-04-05T18:46:00",
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏",
        status: "error",
        location: "‡∏ö‡∏≤‡∏á‡∏ö‡∏±‡∏ß‡∏ó‡∏≠‡∏á"
      },
      {
        time: "2025-04-05T09:08:00",
        message: "‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ñ‡∏∂‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á",
        status: "hub",
        location: "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°"
      }
    ];

    return res.status(200).json({ success: true, history });
  } catch (err) {
    console.error("‚ùå getShippingHistory error:", err);
    return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

exports.confirmDeliveryByAuctionId = async (req, res) => {
  try {
    const { auctionId } = req.params;
    const userId = req.user?.userId;

    console.log("üîé auctionId:", auctionId);
    console.log("üîé req.user:", req.user);

    if (!userId) {
      return res.status(401).json({ success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    const payment = await Payment.findOne({ auctionId });
    if (!payment) {
      return res.status(404).json({ success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
    }

    if (!payment.userId || payment.userId.toString() !== userId.toString()) {
      return res.status(403).json({ success: false, error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ" });
    }

    if (payment.shippingStatus !== "delivered") {
      return res.status(400).json({ success: false, error: "‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'delivered' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ" });
    }

    payment.shippingStatus = "completed";
    payment.deliveryConfirmedAt = new Date();
    await payment.save();

    return res.status(200).json({ success: true, message: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå confirmDeliveryByAuctionId error:", err);
    return res.status(500).json({ success: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

exports.downloadReceiptPDF = async (req, res) => {
  try {
    const { paymentId } = req.params;

    const payment = await Payment.findById(paymentId)
      .populate({ path: "auctionId", model: "Auction" })
      .populate({ path: "userId", model: "User" });

    if (!payment) {
      return res.status(404).send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à");
    }

    const doc = new PDFDocument({ size: 'A4', margin: 50 });

    const thaiFontPath = path.resolve(__dirname, '../assets/fonts/THSarabunNew.ttf');
    if (fs.existsSync(thaiFontPath)) {
      doc.registerFont('THSarabun', thaiFontPath);
      doc.font('THSarabun');
    } else {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ THSarabunNew.ttf, ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô');
    }

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=receipt-${paymentId}.pdf`);

    doc.pipe(res);

    // Header (‡∏ã‡πâ‡∏≤‡∏¢)
    doc.fontSize(14).text('Toy Auction', 50, 50);
    doc.fontSize(12).text('12/1234 ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10160', 50);
    doc.text('‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ 0105511222333', 50);
    doc.text('‡πÇ‡∏ó‡∏£. 1234567890', 50);
    doc.text('‡∏≠‡∏µ‡πÄ‡∏°‡∏• seller@test.com', 50);

    // Header (‡∏Ç‡∏ß‡∏≤)
    doc.fontSize(16).text('‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô', 350, 50, { align: 'right' });
    doc.fontSize(10).text('‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö', 350, 70, { align: 'right' });
    doc.text(`‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${payment._id}`, 350, 85, { align: 'right' });
    doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(payment.createdAt).toLocaleDateString('th-TH')}`, 350, 100, { align: 'right' });

    // ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠
    doc.moveDown(2);
    doc.fontSize(12).text(`‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${payment.recipientName}`);
    doc.text(`‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${payment.shippingAddress}`);
    doc.text(`‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${payment.recipientPhone}`);

    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const tableTop = 200;
    const colX = [50, 220, 300, 370, 440, 510];

    doc.moveTo(50, tableTop).lineTo(550, tableTop).stroke();
    doc.fontSize(12).text('#', colX[0], tableTop + 5);
    doc.text('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', colX[1], tableTop + 5);
    doc.text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', colX[2], tableTop + 5);
    doc.text('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢', colX[3], tableTop + 5);
    doc.text('‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î', colX[4], tableTop + 5);
    doc.text('‡∏†‡∏≤‡∏©‡∏µ', colX[5], tableTop + 5);

    doc.moveTo(50, tableTop + 20).lineTo(550, tableTop + 20).stroke();

    const itemName = payment.auctionId?.name || '-';
    const price = payment.amount || 0;
    const tax = +(price * 0.07).toFixed(2);
    const total = +(price + tax).toFixed(2);

    const rowY = tableTop + 30;
    doc.text('1', colX[0], rowY);
    doc.text(itemName, colX[1], rowY);
    doc.text('1', colX[2], rowY);
    doc.text(price.toFixed(2), colX[3], rowY);
    doc.text('0.00', colX[4], rowY);
    doc.text('7%', colX[5], rowY);

    doc.moveTo(50, rowY + 20).lineTo(550, rowY + 20).stroke();

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    const sumY = rowY + 40;
    doc.fontSize(12).text('‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', 400, sumY);
    doc.text(price.toFixed(2), 500, sumY, { align: 'right' });
    doc.text('‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ/‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏†‡∏≤‡∏©‡∏µ', 400, sumY + 15);
    doc.text('0.00', 500, sumY + 15, { align: 'right' });
    doc.text('‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ', 400, sumY + 30);
    doc.text(price.toFixed(2), 500, sumY + 30, { align: 'right' });
    doc.text('‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 7%', 400, sumY + 45);
    doc.text(tax.toFixed(2), 500, sumY + 45, { align: 'right' });
    doc.text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô', 400, sumY + 60);
    doc.text(total.toFixed(2), 500, sumY + 60, { align: 'right' });

    // ‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ
    // if (payment.slipImage) {
    //   const imagePath = `.${payment.slipImage}`;
    //   if (fs.existsSync(imagePath)) {
    //     doc.image(imagePath, 50, sumY + 100, { fit: [200, 200] });
    //   } else {
    //     doc.text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ', 50, sumY + 100);
    //   }
    // }

    doc.end();
  } catch (err) {
    console.error("‚ùå downloadReceiptPDF error:", err);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à");
  }
};
