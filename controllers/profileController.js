const path = require('path');
const multer = require('multer');
const Profile = require("../schemas/v1/profile.schema");
const User = require("../schemas/v1/user.schema");
const uaParser = require('ua-parser-js');
const geoip = require('geoip-lite');

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Binary ‡πÄ‡∏õ‡πá‡∏ô Base64 URL
const getBase64Image = (profileImage) => {
  if (!profileImage || !profileImage.data) return null;
  return `data:${profileImage.contentType};base64,${profileImage.data.toString("base64")}`;
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
exports.getProfile = async (req, res) => {
  try {
    const userId = req.user.userId;
    const profile = await Profile.findOne({ user: userId }).populate("user");

    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    const userObj = profile.user?.user || profile.user;

    res.status(200).json({
      status: "success",
      data: {
        name: profile.name,
        email: userObj?.email || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
        phone: userObj?.phone || profile.phone || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
        gender: profile.gender || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        birthday: profile.birthday || null,
        addresses: profile.addresses || [],
        profileImage: profile.profileImage?.data
          ? `data:${profile.profileImage.contentType};base64,${profile.profileImage.data.toString("base64")}`
          : null,
        createdAt: profile.createdAt,
      },
    });
  } catch (err) {
    console.error("‚ùå Error in getProfile:", err);
    res.status(500).json({ status: "error", message: err.message });
  }
};

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS
exports.addAddress = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { label, fullAddress, name, phone, location } = req.body;

    if (!label || !fullAddress || !name || !phone) {
      return res.status(400).json({ status: "error", message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const profile = await Profile.findOne({ user: userId });
    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    profile.addresses.push({
      label,
      fullAddress,
      name,
      phone,
      location: location || { lat: null, lng: null },
    });

    await profile.save();

    res.status(200).json({ status: "success", message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", data: profile.addresses });
  } catch (err) {
    console.error("‚ùå Error in addAddress:", err);
    res.status(500).json({ status: "error", message: err.message });
  }
};

// ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
exports.deleteAddress = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { addressId } = req.params;

    const profile = await Profile.findOne({ user: userId });
    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    profile.addresses = profile.addresses.filter(addr => addr._id.toString() !== addressId);

    // ‚úÖ FIX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö address ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ name / phone
    profile.addresses = profile.addresses.map(addr => ({
      ...addr.toObject(),
      name: addr.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠",
      phone: addr.phone || "0000000000"
    }));

    await profile.save();

    res.status(200).json({ status: "success", message: "‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", data: profile.addresses });
  } catch (err) {
    console.error("‚ùå Error in deleteAddress:", err);
    res.status(500).json({ status: "error", message: err.message });
  }
};

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
exports.setDefaultAddress = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { addressId } = req.params;

    const profile = await Profile.findOne({ user: userId });
    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    profile.addresses = profile.addresses.map(addr => ({
      ...addr.toObject(),
      isDefault: addr._id.toString() === addressId
    }));

    await profile.save();

    res.status(200).json({ status: "success", message: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", data: profile.addresses });
  } catch (err) {
    console.error("‚ùå Error in setDefaultAddress:", err);
    res.status(500).json({ status: "error", message: err.message });
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏û‡∏¥‡πà‡∏° gender, birthday)
exports.updateProfile = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { name, phone, address, gender, birthday } = req.body;

    const profile = await Profile.findOneAndUpdate(
      { user: userId },
      { name, phone, address, gender, birthday },
      { new: true }
    );

    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    const user = await User.findByIdAndUpdate(
      userId,
      { "user.name": name, "user.phone": phone },
      { new: true }
    );

    res.status(200).json({
      status: "success",
      data: {
        name: profile.name,
        phone: profile.phone,
        address: profile.address,
        gender: profile.gender,
        birthday: profile.birthday,
        profileImage: getBase64Image(profile.profileImage)
      }
    });
  } catch (err) {
    res.status(500).json({ status: "error", message: err.message });
  }
};

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'public/uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
  }
});
const upload = multer({ storage });

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
exports.uploadProfileImage = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ status: "fail", message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
    }

    const userId = req.user.userId;
    let profile = await Profile.findOne({ user: userId });

    if (!profile) {
      return res.status(404).json({ status: "fail", message: "Profile not found" });
    }

    profile.profileImage = {
      data: Buffer.from(req.file.buffer),
      contentType: req.file.mimetype
    };

    await profile.save();

    res.json({ status: "success", message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  } catch (error) {
    console.error("üö® Upload Error:", error);
    res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
  }
};

// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
exports.recordLoginHistory = async (req, userId) => {
  try {
    const profile = await Profile.findOne({ user: userId });
    if (!profile) return;

    const userAgent = uaParser(req.headers["user-agent"]);
    const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
    const geo = geoip.lookup(ip) || {};

    const loginEntry = {
      ipAddress: ip,
      userAgent: req.headers["user-agent"],
      device: `${userAgent.device.vendor || "Unknown"} ${userAgent.device.model || ""}`,
      os: `${userAgent.os.name} ${userAgent.os.version}`,
      browser: `${userAgent.browser.name} ${userAgent.browser.version}`,
      location: `${geo.city || "Unknown"}, ${geo.country || "Unknown"}`,
      timestamp: new Date(),
    };

    profile.loginHistory.unshift(loginEntry);
    if (profile.loginHistory.length > 10) {
      profile.loginHistory.pop();
    }

    await profile.save();
  } catch (err) {
    console.error("Error recording login history:", err);
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
exports.getLoginHistory = async (req, res) => {
  try {
    const userId = req.user?.userId;
    if (!userId) {
      return res.status(401).json({ status: "error", message: "Unauthorized: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    const profile = await Profile.findOne({ user: userId });

    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    return res.status(200).json({
      status: "success",
      data: { loginHistory: profile.loginHistory || [] }
    });

  } catch (err) {
    console.error("üö® getLoginHistory Error:", err);
    res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

