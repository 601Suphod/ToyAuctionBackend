// controllers/auctionController.js
const Auction = require("../schemas/v1/auction.schema");
const Bid = require("../schemas/v1/bid.schema");
const User = require("../schemas/v1/user.schema"); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
const sendWinnerEmail = require("../modules/email/emailService");
const sendNextWinnerEmail = require("../modules/email/emailService");
const { isValidObjectId } = require("mongoose");
const mongoose = require("mongoose");

exports.createAuction = async (req, res) => {
  try {
    const { name, startingPrice, minimumBidIncrement = 10, category } = req.body;

    if (!name || !startingPrice || !category) {
      return res.status(400).send({ status: "error", message: "Missing required fields" });
    }

    // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô categories ‡πÄ‡∏õ‡πá‡∏ô validCategories
    const categories = [
      { id: "designer_toys", name: "Designer Toys" },
      { id: "vinyl_figures", name: "Vinyl Figures" },
      { id: "resin_figures", name: "Resin Figures" },
      { id: "blind_box", name: "Blind Box" },
      { id: "anime_figures", name: "Anime Figures" },
      { id: "movie_game_collectibles", name: "Movie/Game Collectibles" },
      { id: "robot_mecha", name: "Robot Mecha" },
      { id: "soft_vinyl", name: "Soft Vinyl" },
      { id: "kaiju_monsters", name: "Kaiju Monsters" },
      { id: "diy_custom", name: "DIY Custom" },
      { id: "retro_vintage", name: "Retro Vintage" },
      { id: "limited_edition", name: "Limited Edition" },
      { id: "gunpla_models", name: "Gunpla Models" },
      { id: "plastic_models", name: "Plastic Models" }
    ];

    // ‚úÖ ‡πÉ‡∏ä‡πâ categories.map(c => c.id) ‡πÅ‡∏ó‡∏ô validCategories
    const validCategories = categories.map(c => c.id);

    if (!validCategories.includes(category)) {
      return res.status(400).send({ status: "error", message: "Invalid category" });
    }

    if (!req.files || req.files.length === 0) {
      return res.status(400).send({ status: "error", message: "‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏†‡∏≤‡∏û" });
    }

    if (req.files.length > 5) {
      return res.status(400).send({ status: "error", message: "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏π‡∏õ" });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô Base64 ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MIME type
    const images = req.files.map((file) => ({
      data: file.buffer.toString("base64"),
      contentType: file.mimetype,
    }));

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 5);

    const auction = new Auction({
      name,
      images,
      startingPrice,
      currentPrice: startingPrice,
      minimumBidIncrement,
      expiresAt,
      owner: req.user.userId,
      category,
    });

    await auction.save();
    res.status(201).send({ status: "success", data: auction });
  } catch (err) {
    console.error("‚ùå Error creating auction:", err);
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.checkAndEndAuctions = async () => {
  try {
    console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤...");

    const now = new Date();
    const expiredAuctions = await Auction.find({ expiresAt: { $lte: now }, status: "active" })
      .populate("highestBidder", "email name");

    if (expiredAuctions.length === 0) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î");
      return;
    }

    for (const auction of expiredAuctions) {
      console.log(`üö® ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•: ${auction.name}`);

      auction.status = "ended";
      auction.finalPrice = auction.currentPrice;
      await auction.save();

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const winnerEmail = auction.highestBidder?.email || auction.highestBidderEmail;
      
      if (winnerEmail) {
        console.log(`üì¢ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${winnerEmail}`);
        await sendWinnerEmail(winnerEmail, auction.name, auction.finalPrice);
      } else {
        console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${auction.name}`);
      }
    }

    console.log(`‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${expiredAuctions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  } catch (err) {
    console.error("‚ùå Error checking and ending auctions:", err);
  }
};

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
exports.getAuctionById = async (req, res) => {
  try {
    const { id } = req.params;
    if (!isValidObjectId(id)) {
      return res.status(400).send({ status: "error", message: "Invalid auction ID" });
    }

    const auction = await Auction.findById(id).populate("highestBidder", "name email");

    if (!auction) {
      return res.status(404).send({ status: "error", message: "Auction not found" });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö <img>
    const images = auction.images.map(img => `data:${img.contentType};base64,${img.data}`);

    res.status(200).send({
      status: "success",
      data: {
        ...auction.toObject(),
        images, // ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Base64 ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô <img>
      }
    });
  } catch (err) {
    res.status(500).send({ status: "error", message: err.message });
  }
};


// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAuctions = async (req, res) => {
  try {
    const auctions = await Auction.find().populate("highestBidder", "name email");
    res.status(200).send({ status: "success", data: auctions });
  } catch (err) {
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.getAuctionHistory = async (req, res) => {
  try {
    const { id } = req.params;
    if (!isValidObjectId(id)) {
      return res.status(400).send({ status: "error", message: "Invalid auction ID" });
    }

    const auction = await Auction.findById(id).select("history").populate("history.user", "name email");
    if (!auction) {
      return res.status(404).send({ status: "error", message: "Auction not found" });
    }

    res.status(200).send({ status: "success", data: auction.history });
  } catch (err) {
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.placeBid = async (req, res) => {
  try {
    console.log("üìå ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", req.cookies);

    const { amount } = req.body;
    const { id } = req.params;

    const auction = await Auction.findById(id);
    if (!auction) return res.status(404).send({ status: "error", message: "Auction not found" });

    if (amount < auction.currentPrice + auction.minimumBidIncrement) {
      return res.status(400).send({ status: "error", message: "Bid too low" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å `user.name`
    const bidder = await User.findById(req.user.userId).select("user.name email");
    if (!bidder) {
      return res.status(400).send({ status: "error", message: "User not found" });
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const bid = new Bid({
      auction: auction._id,
      user: req.user.userId,
      amount,
      userName: bidder.user.name, // ‚úÖ ‡∏î‡∏∂‡∏á `user.name` ‡πÅ‡∏ó‡∏ô `name`
    });

    auction.currentPrice = amount;
    auction.highestBidder = req.user.userId;
    auction.highestBidderEmail = bidder.email;
    auction.bids.push(bid._id);

    await auction.save();
    await bid.save();

    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÇ‡∏î‡∏¢: ${bidder.user.name}`);

    res.status(201).send({ status: "success", data: { auction, bid, bidderName: bidder.user.name } });
  } catch (err) {
    console.error("‚ùå Error placing bid:", err);
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.endAuctions = async () => {
  try {
    console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤...");

    const now = new Date();
    const expiredAuctions = await Auction.find({ expiresAt: { $lte: now }, status: "active" })
      .populate("highestBidder", "email");

    if (expiredAuctions.length === 0) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î");
      return;
    }

    for (const auction of expiredAuctions) {
      auction.status = "ended";
      auction.finalPrice = auction.currentPrice;
      auction.paymentDeadline = new Date(Date.now() + 5 * 60 * 1000);

      await auction.save();

      if (auction.highestBidder?.email) {
        console.log(`üì¢ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${auction.highestBidder.email}`);
        await sendWinnerEmail(auction.highestBidder.email, auction.name, auction.finalPrice);
      } else {
        console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞");
      }
    }

    console.log(`‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${expiredAuctions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  } catch (err) {
    console.error("‚ùå Error ending auctions:", err);
  }
};

exports.getBidHistory = async (req, res) => {
  try {
    const { id } = req.params;
    if (!isValidObjectId(id)) {
      return res.status(400).send({ status: "error", message: "Invalid auction ID" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏° `user.name`
    const bids = await Bid.find({ auction: id })
      .populate("user", "user.name email") // ‚úÖ ‡∏î‡∏∂‡∏á `user.name` ‡πÅ‡∏ó‡∏ô `name`
      .sort({ createdAt: -1 });

    if (!bids.length) {
      return res.status(404).send({ status: "error", message: "No bids found" });
    }

    res.status(200).send({ status: "success", data: bids });
  } catch (err) {
    res.status(500).send({ status: "error", message: err.message });
  }
};


exports.getHighestBidder = async (req, res) => {
  try {
    const { id } = req.params;
    if (!isValidObjectId(id)) {
      return res.status(400).send({ status: "error", message: "Invalid auction ID" });
    }

    const auction = await Auction.findById(id).populate("highestBidder", "name email");
    if (!auction) {
      return res.status(404).send({ status: "error", message: "Auction not found" });
    }

    if (!auction.highestBidder) {
      return res.status(404).send({ status: "error", message: "No bids placed yet" });
    }

    res.status(200).send({
      status: "success",
      data: {
        highestBidder: auction.highestBidder,
        currentPrice: auction.currentPrice,
      },
    });
  } catch (err) {
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.forceEndAuctions = async () => {
  try {
    console.log("üö® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...");

    // ‚úÖ ‡πÉ‡∏ä‡πâ `select("highestBidderEmail")` ‡πÅ‡∏ó‡∏ô `populate()`
    const activeAuctions = await Auction.find({ status: "active" }).select("name highestBidderEmail currentPrice");

    console.log(`üìå ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà: ${activeAuctions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    if (activeAuctions.length === 0) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö");
      return;
    }

    for (const auction of activeAuctions) {
      auction.status = "ended";
      auction.finalPrice = auction.currentPrice;
      await auction.save();

      if (auction.highestBidderEmail) {
        console.log(`üì¢ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${auction.highestBidderEmail}`);
        await sendWinnerEmail(auction.highestBidderEmail, auction.name, auction.finalPrice);
      } else {
        console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${auction.name}`);
      }
    }

    console.log(`‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${activeAuctions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  } catch (err) {
    console.error("‚ùå Error forcing end auctions:", err);
  }
};

exports.forceEndAuctionById = async (req, res) => {
  try {
    const { id } = req.params;

    console.log(`üö® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ID: ${id}`);

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏° populate ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
    const auction = await Auction.findById(id).populate("highestBidder", "email");

    if (!auction) {
      return res.status(404).send({ status: "error", message: "Auction not found" });
    }

    if (auction.status === "ended") {
      return res.status(400).send({ status: "error", message: "Auction already ended" });
    }

    auction.status = "ended";
    auction.finalPrice = auction.currentPrice;
    await auction.save();

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ highestBidder ‡∏°‡∏µ email ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const winnerEmail = auction.highestBidder?.email || auction.highestBidderEmail;
    
    if (winnerEmail) {
      console.log(`üì¢ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${winnerEmail}`);
      await sendWinnerEmail(winnerEmail, auction.name, auction.finalPrice);
    } else {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${auction.name}`);
    }

    res.status(200).send({ status: "success", message: `Auction ID ${id} forcibly ended` });
  } catch (err) {
    console.error("‚ùå Error forcing end auction:", err);
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.forceExpirePayment = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üö® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ID: ${id}`);

    const auction = await Auction.findById(id).populate("bids").populate("highestBidder", "email");
    if (!auction) return res.status(404).send({ status: "error", message: "Auction not found" });

    if (auction.status !== "ended") {
      return res.status(400).send({ status: "error", message: "Auction is still active" });
    }

    if (!auction.paymentDeadline) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö paymentDeadline ‚Üí ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô");
      auction.paymentDeadline = new Date();
      await auction.save();
    }

    const allBids = await Bid.find({ auction: auction._id }).sort({ amount: -1 });
    console.log("üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", allBids);

    if (allBids.length > 1) {
      const nextBidder = allBids[1]; // üìå ‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      console.log("üîç ‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:", nextBidder);

      if (!nextBidder?.user) {
        console.log("‚ö†Ô∏è nextBidder.user ‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ null");
        return res.status(400).send({ status: "error", message: "Next bidder data is missing" });
      }

      const nextBidderUser = await User.findById(nextBidder.user);
      console.log("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô User collection:", nextBidderUser);

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á nextBidderUser ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      console.log("üìß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ nextBidderUser:", JSON.stringify(nextBidderUser, null, 2));

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const nextBidderEmail = nextBidderUser?.email || nextBidderUser?.user?.email || null;
      console.log("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:", nextBidderEmail);

      if (!nextBidderEmail) {
        console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ");
        return res.status(400).send({ status: "error", message: "Next bidder has no email" });
      }

      console.log(`üì¢ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${nextBidderEmail}`);
      await sendNextWinnerEmail(nextBidderEmail, auction.name, nextBidder.amount);

      auction.highestBidder = nextBidder.user;
      auction.highestBidderEmail = nextBidderEmail;
      auction.finalPrice = nextBidder.amount;
      auction.paymentDeadline = new Date(Date.now() + 5 * 60 * 1000); // ‚úÖ ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 24 ‡∏ä‡∏°.
      await auction.save();
    } else {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${auction.name}`);
      return res.status(400).send({ status: "error", message: "No next bidder available" });
    }

    res.status(200).send({ status: "success", message: "Payment time expired and next bidder assigned" });
  } catch (err) {
    console.error("‚ùå Error forcing payment expiration:", err);
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.getCategories = async (req, res) => {
  try {
    const categories = [
      { key: "designer_toys", name: "Designer Toys" },
      { key: "vinyl_figures", name: "Vinyl Figures" },
      { key: "resin_figures", name: "Resin Figures" },
      { key: "blind_box", name: "Blind Box Toys" },
      { key: "anime_figures", name: "Anime Figures" },
      { key: "movie_game_collectibles", name: "Movie & Game Collectibles" },
      { key: "robot_mecha", name: "Robot & Mecha Toys" },
      { key: "soft_vinyl", name: "Soft Vinyl (Sofubi)" },
      { key: "kaiju_monsters", name: "Kaiju & Monsters" },
      { key: "diy_custom", name: "DIY & Custom Toys" },
      { key: "retro_vintage", name: "Retro & Vintage Toys" },
      { key: "limited_edition", name: "Limited Edition & Exclusive" },
      { key: "gunpla_models", name: "Gunpla & Mecha Models" }, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤
      { key: "plastic_models", name: "Plastic Model Kits" } // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å
    ];
    res.status(200).send({ status: "success", data: categories });
  } catch (err) {
    res.status(500).send({ status: "error", message: err.message });
  }
};

const getUserIdFromRequest = (req) => {
  try {
    if (req.user && req.user.userId) {
      return req.user.userId;
    }
    if (req.cookies && req.cookies.accesstoken) {
      const decoded = jwt.verify(req.cookies.accesstoken, process.env.JWT_SECRET);
      return decoded.userId;
    }
    return null;
  } catch (err) {
    console.error("‚ùå Error decoding access token:", err);
    return null;
  }
};

exports.getMyAuctionHistory = async (req, res) => {
  try {
    const userId = getUserIdFromRequest(req);
    if (!userId) {
      return res.status(401).send({ status: "error", message: "Unauthorized or invalid token" });
    }

    const myAuctions = await Auction.find({ owner: userId }).sort({ createdAt: -1 });
    res.status(200).send({ status: "success", data: myAuctions });
  } catch (err) {
    res.status(500).send({ status: "error", message: err.message });
  }
};

exports.getMyBidHistory = async (req, res) => {
  try {
    console.log("üìå Checking My Bid History...");

    const userId = getUserIdFromRequest(req);
    if (!userId) {
      return res.status(401).send({ status: "error", message: "Unauthorized or invalid token" });
    }

    const myBids = await Bid.find({ user: userId })
      .populate("auction", "name currentPrice")
      .sort({ createdAt: -1 });

    console.log("‚úÖ Found Bids:", myBids.length);
    res.status(200).send({ status: "success", data: myBids });
  } catch (err) {
    console.error("‚ùå Error fetching bid history:", err);
    res.status(500).send({ status: "error", message: err.message });
  }
};

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô router
exports.getAuctionHistory = async (req, res) => {
  try {
    const { id } = req.params;
    if (!isValidObjectId(id)) {
      return res.status(400).send({ status: "error", message: "Invalid auction ID" });
    }

    const auction = await Auction.findById(id).select("history").populate("history.user", "name email");
    if (!auction) {
      return res.status(404).send({ status: "error", message: "Auction not found" });
    }

    res.status(200).send({ status: "success", data: auction.history });
  } catch (err) { 
    res.status(500).send({ status: "error", message: err.message });
  }
};

